@page "/aisles"

<MudPaper Elevation="5" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Teal.Lighten4};")" Class="my-2">
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true" >
        <MudIcon Icon="@Icons.Material.Filled.LocalGroceryStore" Color="Color.Inherit" />
        <MudText Typo="Typo.h5" Align="Align.Center">@Localizer["Aisles"]</MudText>
    </MudStack>
</MudPaper>

<SortableList Id="sortable1" Items="AisleList" OnUpdate="@SortList" Context="aisle" Handle=".drag-handle" >
    <SortableItemTemplate>
        <div>
            <MudPaper Elevation="5" @ondblclick="@(() => Edit(aisle))" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Teal.Lighten5};")" Class="my-2 mx-2">
                <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Row="true" >
                    <MudIcon Icon="@Icons.Material.Filled.DragHandle" Size="Size.Large" Class="drag-handle ms-2" />
                    <MudText Class="d-flex flex-grow-1 px-0 py-1" Typo="Typo.subtitle1">@aisle.AisleName</MudText>
                    <MudIconButton @onpointerdown="@(() => Delete(aisle))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="py-1" />
                </MudStack>
            </MudPaper>
        </div>
    </SortableItemTemplate>
</SortableList>

<MudFab StartIcon="@Icons.Material.Filled.Add" OnClick="NewAisle" Color="Color.Success" Size="Size.Small" Class="absolute z-10 " Style="right:46%; bottom:-30px;" />

@code
{
    [Inject] internal IAisleRepository AisleRepo { get; set; }

    [Inject] internal IItemRepository ItemRepo { get; set; }

    [Inject] internal IMauiDialogSvc MauiDialogSvc { get; set; }

    public List<Aisle> AisleList { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAisles();
        await base.OnInitializedAsync();
    }

    private async Task LoadAisles()
    {
        AisleList = (await AisleRepo.GetAisles()).Where(a => a.AisleId != -1).ToList();
    }

    private async void SortList((int oldIndex, int newIndex) indices)
    {
        var (oldIndex, newIndex) = indices;

        var items = this.AisleList;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        await SetAisleOrder();

        StateHasChanged();
    }

    private async Task Edit(Aisle aisle)
    {
        string aisleName = await MauiDialogSvc.EditAisle(Localizer["EditAisle"], aisle.AisleName);
        if (string.IsNullOrEmpty(aisleName) || aisle.AisleName.ToLower() == aisleName.ToLower()) return;
        if (!(await AisleNameUnique(aisleName))) return;

        aisle.AisleName = aisleName;
        await AisleRepo.UpdateAisle(aisle);
        await LoadAisles();
    }

    private async Task<bool> AisleNameUnique(string aisleName)
    {
        var aisleNames = AisleList.Select(a => a.AisleName.ToLower()).ToList();

        aisleNames.Add(aisleName.ToLower());
        if (aisleNames.Count() != aisleNames.Distinct().Count())
        {
            await MauiDialogSvc.Alert(Localizer["AisleExists"]);
            return false;
        }

        return true;
    }

    private async void Delete(Aisle aisle)
    {
        if (await MauiDialogSvc.Confirm(Localizer["DeleteAisle", aisle.AisleName], null, Localizer["Yes"], Localizer["No"]))
        {
            await ItemRepo.UnsetAisle(aisle.AisleId);
            await AisleRepo.DeleteAisle(aisle.AisleId);
            await SetAisleOrder();
            await LoadAisles();
        }
    }

    private async Task NewAisle()
    {
        string aisleName = await MauiDialogSvc.EditAisle(Localizer["NewAisle"], null);
        if (string.IsNullOrEmpty(aisleName)) return;
        if (!(await AisleNameUnique(aisleName))) return;

        Aisle newAisle = new();
        newAisle.AisleName = aisleName;
        newAisle.Order = AisleList.Count > 0 ? AisleList.Max(a => a.Order) + 1 : 1;

        await AisleRepo.AddAisle(newAisle);
        await LoadAisles();
    }

    private async Task SetAisleOrder()
    {
        for (int i = 0; i < AisleList.Count(); i++)
        {
            AisleList[i].Order = i + 1;
        }
        
        await AisleRepo.UpdateAisles(AisleList);
    }
}