@page "/aisles"
@using Shopping.Data;
@using Shopping.Data.Entities;
@using Shopping.Data.Repos;
@using Shopping.Components.Dialogs;
@using Shopping.Components.Layout;
@using Shopping.Services;

@foreach (Aisle aisle in AisleList)
{
    <MudPaper Elevation="5" @ondblclick="@(() => Edit(aisle))" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Teal.Lighten4};")" Class="my-2">
        <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Row="true" >
            <MudText Class="ps-4" Typo="Typo.subtitle1">@aisle.AisleName (@aisle.Order)</MudText>
            <MudSpacer />
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Size="Size.Small" Class="me-6">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(aisle))" Class="px-1" />
                @if (aisle.Order == 1)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="@(() => MoveUp(aisle))" Class="px-1 invisible" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="@(() => MoveUp(aisle))" Class="px-1" />
                }
                @if (aisle.Order == AisleList.Max(a => a.Order))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" OnClick="@(() => MoveDown(aisle))" Class="px-1 invisible" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" OnClick="@(() => MoveDown(aisle))" Class="px-1" />
                }
            </MudButtonGroup>
        </MudStack>
    </MudPaper>
}

<MudFab StartIcon="@Icons.Material.Filled.Add" OnClick="NewAisle" Color="Color.Success" Size="Size.Small" Class="absolute z-10 " Style="right:46%; bottom:-30px;" />

@code
{
    [Inject] internal IAisleRepository AisleRepo { get; set; }

    [Inject] internal IItemRepository ItemRepo { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IMauiDialogSvc MauiDialogSvc { get; set; }

    List<Aisle> AisleList { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadAisles();
    }

    private async Task LoadAisles()
    {
        AisleList = (await AisleRepo.GetAisles()).Where(a => a.AisleId != -1).ToList();
    }

    private async Task MoveUp(Aisle aisle)
    {
        var swapAisle = AisleList.FirstOrDefault(a => a.Order == aisle.Order - 1);
        if (swapAisle != null) swapAisle.Order++;
        aisle.Order--;

        await AisleRepo.UpdateAisles(AisleList);
        await LoadAisles();
    }

    private async Task MoveDown(Aisle aisle)
    {
        var swapAisle = AisleList.FirstOrDefault(a => a.Order == aisle.Order + 1);
        if (swapAisle != null) swapAisle.Order--;
        aisle.Order++;

        await AisleRepo.UpdateAisles(AisleList);
        await LoadAisles();
    }

    private async Task NewAisle()
    {
        string aisleName = await MauiDialogSvc.EditAisle("New Aisle", null);
        if (string.IsNullOrEmpty(aisleName)) return;
        if (!(await AisleNameUnique(aisleName))) return;

        Aisle newAisle = new();
        newAisle.AisleName = aisleName;
        newAisle.Order = AisleList.Max(a => a.Order) + 1;

        await AisleRepo.AddAisle(newAisle);
        await LoadAisles();
    }

    private async Task<bool> AisleNameUnique(string aisleName)
    {
        var aisleNames = AisleList.Select(a => a.AisleName.ToLower()).ToList();

        aisleNames.Add(aisleName.ToLower());
        if (aisleNames.Count() != aisleNames.Distinct().Count())
        {
            await MauiDialogSvc.Alert("Aisle exists");
            return false;
        }

        return true;
    }

    private async Task Delete(Aisle aisle)
    {
        if (await MauiDialogSvc.Confirm($"Delete \"{aisle.AisleName}\"?", null, "Yes", "No"))
        {
            await AisleRepo.DeleteAisle(aisle.AisleId);
            await ItemRepo.UnsetAisle(aisle.AisleId);
            await LoadAisles();
        }
    }

    private async Task Edit(Aisle aisle)
    {
        string aisleName = await MauiDialogSvc.EditAisle("Edit Aisle", aisle.AisleName);
        if (string.IsNullOrEmpty(aisleName) || aisle.AisleName.ToLower() == aisleName.ToLower()) return;
        if (!(await AisleNameUnique(aisleName))) return;

        aisle.AisleName = aisleName;
        await AisleRepo.UpdateAisle(aisle);
        await LoadAisles();
    }
}