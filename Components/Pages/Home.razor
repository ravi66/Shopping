@page "/"
@using Shopping.Data;
@using Shopping.Data.Entities;
@using Shopping.Data.Repos;
@using Shopping.Components.Dialogs;
@using Shopping.Components.Layout;

<AppBar CentreText="Shopping List" ShowAisles="true" />

<MudForm Model="@NewItem" @ref="@NewItemForm" Validation="@(validator.ValidateValue)" ValidationDelay="0">
    <MudPaper Elevation="5" >
        <MudTextField Variant="Variant.Outlined" Label="New Item" @bind-Value=NewItem.Name For="@(() => NewItem.Name)" 
            Margin="Margin.Dense" MaxLength="25" Class="pa-0 mt-0 mb-2" OnlyValidateIfDirty="true" 
            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Check" OnAdornmentClick="CreateItem" 
            AdornmentColor="Color.Primary" @ref="@NewItemField" />
    </MudPaper>
</MudForm>

@foreach (var item in ListedItems)
{
    <MudPaper Class="d-flex my-1 px-2" Style="@($"background:{Colors.LightBlue.Lighten5}")" @ondblclick="@(() => EditItem(item))" >
        <MudCheckBox T="bool" Label="@item.Label" LabelPosition="LabelPosition.Start" Value="@item.Listed" 
            ValueChanged="@(l => ListedChanged(l, item))" Class="py-0 px-2" Size="Size.Large" Dense="true" 
            Color="Color.Default" CheckedIcon="@Icons.Material.Outlined.CheckBox" />
    </MudPaper>
}

<MudDivider Class="my-4" />

@foreach (var item in UnlistedItems)
{
    <MudPaper Class="d-flex pa-0 my-1" Style="@($"color:{Colors.Shades.White}; background:{Colors.Grey.Darken2};")" @ondblclick="@(() => EditItem(item))" >
        <MudCheckBox T="bool" Label="@item.Label" LabelPosition="LabelPosition.Start" Value="@item.Listed" 
            ValueChanged="@(l => ListedChanged(l, item))" Class="py-0 px-2" Size="Size.Large" Dense="true"
            Color="Color.Inherit" />
    </MudPaper>
}

@code {

    [Inject] internal DbUtils DbUtils { get; set; }

    [Inject] internal IItemRepository ItemRepo { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    private List<Item> ListedItems { get; set; } = [];

    private List<Item> UnlistedItems { get; set; } = [];

    private Item NewItem = new();

    private MudForm NewItemForm;

    private readonly ItemValidator validator = new();

    private MudTextField<string> NewItemField;

    protected async override Task OnInitializedAsync()
    {
        //await DbUtils.EnsureDbDeleted();
        await DbUtils.EnsureDbCreated();
        await LoadLists();
    }

    async Task LoadLists()
    {
        ListedItems = (await ItemRepo.GetListedItems()).ToList();
        UnlistedItems = (await ItemRepo.GetUnlistedItems()).ToList();
    }

    async Task ListedChanged(bool listed, Item item)
    {
        item.Listed = listed;
        await ItemRepo.UpdateItem(item);
        await LoadLists();
    }

    async Task CreateItem()
    {
        if (String.IsNullOrWhiteSpace(NewItem.Name))
        {
            await NewItemForm.ResetAsync();
            return;
        }

        await NewItemForm.Validate();
        if (!NewItemForm.IsValid) return;

        await ItemRepo.AddItem(NewItem);
        await LoadLists();
        NewItem = new();
        await NewItemField.ResetAsync();
    }

    async Task EditItem(Item item)
    {
        var dialog = DialogService.Show<ItemDialog>("", new DialogParameters<ItemDialog> { { x => x.SavedItemId, item.ItemId } });
        var result = await dialog.Result;
        if (!result.Canceled) await LoadLists();
    }

}