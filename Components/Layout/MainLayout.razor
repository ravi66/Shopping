@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />

<MudLayout>
    <MudAppBar Dense="true" >
        <MudIconButton Icon="@Icons.Material.Filled.Home" Href="/" Color="Color.Inherit" Class="pa-0" />
        <MudIconButton Icon="@Icons.Material.Filled.LocalGroceryStore" Href="/aisles" Color="Color.Inherit" Class="pa-0" />
        <MudSpacer />
        <MudText Typo="Typo.h5" Class="pa-0">@Localizer["ShoppingList"]</MudText>
        <MudSpacer />
        <MudIconButton Class="pa-0" OnClick="ToggleThemeMode" Icon="@themeIcon" Color="@themeColor" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Small" Class="my-0 py-0 px-2" >
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    [Inject] public NavigationManager NavigationManager { get; set; }

    private bool _isDarkMode = false;
    private string themeIcon = Icons.Material.Filled.DarkMode;
    private Color themeColor = Color.Dark;

    protected async override Task OnInitializedAsync()
    {
        var darkMode = await SecureStorage.Default.GetAsync("dark_mode");
        if (darkMode == null || darkMode == "False")
        {
            _isDarkMode = false;
        }
        else
        {
            _isDarkMode = true;
        }
        
        SetTheme();
    }

    private async void ToggleThemeMode()
    {
        _isDarkMode = !_isDarkMode;
        SetTheme();

        await SecureStorage.Default.SetAsync("dark_mode", _isDarkMode.ToString());
    }

    private void SetTheme()
    {
        themeIcon = _isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;
        themeColor = _isDarkMode ? Color.Warning : Color.Dark;
    }
}