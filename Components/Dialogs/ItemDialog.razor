<style>
    .mud-dialog-custom {
        max-height: 260px;
        max-width: 90%;
        position: absolute;
        top: 50px;
        left: 5%;
    }
</style>

<MudDialog >
    <DialogContent>
        <MudForm Model="@Item" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
            <MudGrid Class="mb-2">
                <MudItem xs="12">
                    <MudTextField Label="@Localizer["ItemName"]" @bind-Value=Item.Name For="@(() => Item.Name)" Margin="Margin.Dense" Required="true" MaxLength="25" Class="pa-0" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField Label="@Localizer["Quantity"]" @bind-Value=Item.Quantity For="@(() => Item.Quantity)" Margin="Margin.Dense" Class="pa-0" Min="1" />
                </MudItem>
                <MudItem xs="11" Class="pa-0">
                    <MudSelect T="int" Label="@Localizer["Aisle"]" Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter"
                               @bind-Value=Item.AisleId Dense="true" Margin="Margin.Dense" Class="ps-3">
                        @foreach (Aisle aisle in Aisles)
                        {
                            <MudSelectItem Value="@(aisle.AisleId)">@aisle.AisleName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
        <MudGrid>
            <MudItem xs="4">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="Cancel">@Localizer["Cancel"]</MudButton>
            </MudItem>
            <MudItem xs="4">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await Save())">@Localizer["Save"]</MudButton>
            </MudItem>
            <MudItem xs="4">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await Delete())">@Localizer["Delete"]</MudButton>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public int SavedItemId { get; set; }

    [Inject] internal IItemRepository ItemRepo { get; set; } = default!;

    [Inject] internal IAisleRepository AisleRepo { get; set; } = default!;

    private Item Item { get; set; } = new();

    private readonly ItemValidator validator = new();

    private MudForm form = default!;

    private List<Aisle> Aisles { get; set; } = [];

    public void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        MudDialog.Options.NoHeader = true;
        MudDialog.SetOptions(MudDialog.Options);

        Aisles = (await AisleRepo.GetAisles()).ToList();
        Item = await ItemRepo.GetItem(SavedItemId) ?? new();
    }

    private async Task Save()
    {
        await form.Validate();

        if (!form.IsValid) return;

        await ItemRepo.UpdateItem(Item);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task Delete()
    {
        await ItemRepo.DeleteItem(SavedItemId);
        MudDialog.Close(DialogResult.Ok(true));
    }
}