@using Shopping.Data;
@using Shopping.Data.Entities;
@using Shopping.Data.Repos;

<MudDialog>
    <DialogContent>
        <MudGrid >
            <MudItem xs="3">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
            </MudItem>
            <MudItem xs="3">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await Save())">Save</MudButton>
            </MudItem>
            <MudItem xs="3">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="New">New</MudButton>
            </MudItem>
            <MudItem xs="3">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await Delete())">Delete</MudButton>
            </MudItem>
        </MudGrid>
        <MudForm Model="@Aisle" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0" >
            <MudTextField Label="Aisle Name" @bind-Value=Aisle.AisleName For="@(() => Aisle.AisleName)" Margin="Margin.Dense" Required="true" MaxLength="25" Class="pa-0" />
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int SavedAisleId { get; set; }

    [Inject] internal IAisleRepository AisleRepo { get; set; }

    [Inject] internal IItemRepository ItemRepo { get; set; }

    [Inject] public ISnackbar Snackbar { get; set; }

    private Aisle Aisle { get; set; } = new();

    private readonly AisleValidator validator = new();

    private MudForm form;

    public void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        MudDialog.Options.NoHeader = true;
        MudDialog.SetOptions(MudDialog.Options);

        if (SavedAisleId > 0) Aisle = await AisleRepo.GetAisle(SavedAisleId);
    }

    private async Task Save()
    {
        await form.Validate();

        if (!form.IsValid) return;

        var aisleNames = (await AisleRepo.GetAisles()).Where(a => a.AisleId != Aisle.AisleId).Select(a => a.AisleName.ToLower()).ToList();
        aisleNames.Add(Aisle.AisleName.ToLower());
        if (aisleNames.Count() != aisleNames.Distinct().Count())
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("Aisle already created", Severity.Error, config =>
            {
                config.ShowCloseIcon = false;
                config.VisibleStateDuration = 2500;
                config.ShowTransitionDuration = 250;
                config.HideTransitionDuration = 250;
            });

            return;
        }

        _ = SavedAisleId == 0 ? await AisleRepo.AddAisle(Aisle) : await AisleRepo.UpdateAisle(Aisle);

        MudDialog.Close(DialogResult.Ok(Aisle.AisleId));
    }

    private async Task Delete()
    {
        if (SavedAisleId == 0) Cancel();

        await ItemRepo.UnsetAisle(SavedAisleId);
        await AisleRepo.DeleteAisle(SavedAisleId);
        MudDialog.Close(DialogResult.Ok(-1));
    }

    private void New()
    {
        SavedAisleId = 0;
        Aisle = new();
    }
}